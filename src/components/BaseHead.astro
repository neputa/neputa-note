---
import { siteConfig } from '@/site-config'
import '../styles/global.css'
import { ClientRouter } from 'astro:transitions'
import Favicons from '@/components/meta/Favicons'

export interface Props {
  title: string
  description?: string
  ogImage?: string | undefined
  articleDate?: string | undefined
  modifiedDate?: string | undefined
}

const {
  title,
  description = siteConfig.description,
  ogImage,
  articleDate,
  modifiedDate
} = Astro.props
const canonicalURL = new URL(Astro.url.pathname, Astro.site)
const socialImageURL = new URL(ogImage ? ogImage : '/open-graph.png', Astro.url).href

const titleSeparator = ' - '

const siteTitle =
  canonicalURL.href === Astro.site?.href
    ? siteConfig.title
    : `${title} ${titleSeparator} ${siteConfig.title}`
---

<meta charset='utf-8' />
<meta name='viewport' content='width=device-width, initial-scale=1.0' />
<meta name='theme-color' content='#EE8A85' />
<link href='/sitemap-index.xml' rel='sitemap' />
<Favicons />
<meta name='generator' content={Astro.generator} />

<link rel='dns-prefetch' href='www.google.co.jp' />
<link rel='dns-prefetch' href='www.googletagmanager.com' />
<link rel='preconnect' href='www.google.co.jp' crossorigin />
<link rel='preconnect' href='www.googletagmanager.com' crossorigin />

<link rel='preconnect' href={Astro.site} />

<meta name='color-scheme' content='light dark' />

<script>
  if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
      navigator.serviceWorker
        .register('/sw-optimized.js')
        .then((registration) => {
          console.log('üöÄ SW registered:', registration.scope)
        })
        .catch((error) => {
          console.log('‚ùå SW registration failed:', error)
        })
    })
  }
</script>

<link rel='canonical' href={canonicalURL} />

<title>{siteTitle}</title>

<ClientRouter fallback='none' transition:animate='initial' />

<script>
  // „ÇØ„É™„ÉÜ„Ç£„Ç´„É´„Å™JS„Éï„Ç°„Ç§„É´„ÇíÂãïÁöÑ„Å´Ê§úÂá∫„Åó„Å¶ÂÑ™ÂÖàË™≠„ÅøËæº„Åø
  const preloadCriticalScripts = () => {
    // ÈáçË¶Å„Å™„Ç≥„É≥„Éù„Éº„Éç„É≥„ÉàÂêç„ÅÆ„Éë„Çø„Éº„É≥ - „Éì„É´„ÉâÊôÇ„ÅÆ„Éè„ÉÉ„Ç∑„É•ÂÄ§„Å´‰æùÂ≠ò„Åó„Å™„ÅÑ„Éë„Çø„Éº„É≥
    const criticalPatterns = [/ClientRouter/i, /page/i, /Breadcrumbs/i, /YouTube/i]

    // ÁèæÂú®„ÅÆ„Éö„Éº„Ç∏ÂÜÖ„ÅÆ„Åô„Åπ„Å¶„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„Çø„Ç∞„ÇíÂèñÂæó
    const scripts = document.querySelectorAll('script[type="module"]')
    const preloadedUrls = new Set()

    // „Åô„Åß„Å´preloadÊ∏à„Åø„ÅÆURL„ÇíË®òÈå≤
    document.querySelectorAll('link[rel="modulepreload"]').forEach((link) => {
      const href = link.getAttribute('href')
      if (href) preloadedUrls.add(href)
    })

    // „Åô„Åß„Å´„É≠„Éº„ÉâÊ∏à„Åø„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„Åã„Çâ„ÇØ„É™„ÉÜ„Ç£„Ç´„É´„Å™„ÇÇ„ÅÆ„ÇíË¶ã„Å§„Åë„Çã
    scripts.forEach((script) => {
      const src = script.getAttribute('src')
      if (src) {
        // „ÇØ„É™„ÉÜ„Ç£„Ç´„É´„Å™„Éë„Çø„Éº„É≥„Å´‰∏ÄËá¥„Åó„ÄÅ„Åæ„Å†„Éó„É™„É≠„Éº„Éâ„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„ÇÇ„ÅÆ
        if (!preloadedUrls.has(src) && criticalPatterns.some((pattern) => pattern.test(src))) {
          const link = document.createElement('link')
          link.rel = 'modulepreload'
          link.href = src
          link.fetchPriority = 'high'
          document.head.appendChild(link)
          preloadedUrls.add(src)
        }
      }
    })

    // „Éö„Éº„Ç∏ÂÜÖ„ÅÆ„Åô„Åπ„Å¶„ÅÆlink[rel="stylesheet"]„ÇÇÂÑ™ÂÖàÁöÑ„Å´Ë™≠„ÅøËæº„ÇÄ
    document.querySelectorAll('link[rel="stylesheet"]').forEach((styleLink) => {
      const href = styleLink.getAttribute('href')
      if (href && !preloadedUrls.has(href)) {
        const link = document.createElement('link')
        link.rel = 'preload'
        link.as = 'style'
        link.href = href
        link.fetchPriority = 'high'
        document.head.appendChild(link)
        preloadedUrls.add(href)
      }
    })
  }

  // ÂÑ™ÂÖàÂ∫¶„ÅÆÈ´ò„ÅÑ„Çπ„ÇØ„É™„Éó„Éà„ÇíÊó©Êúü„Å´Ë™≠„ÅøËæº„ÇÄ
  if (document.readyState === 'loading') {
    // DOMContentLoadedÂâç„Å´preload„ÇíË®≠ÂÆö
    preloadCriticalScripts()
    document.addEventListener('DOMContentLoaded', () => {
      // DOMContentLoadedÊôÇ„Å´ÂÜç„Çπ„Ç≠„É£„É≥
      preloadCriticalScripts()
    })
  } else {
    // „Åô„Åß„Å´DOM„ÅåË™≠„ÅøËæº„Åæ„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØÂç≥ÊôÇÂÆüË°å
    preloadCriticalScripts()
  }

  // Astro„ÅÆÈÅ∑Áßª„Ç§„Éô„É≥„Éà„ÅßÂÜç„Çπ„Ç≠„É£„É≥
  document.addEventListener('astro:after-swap', () => {
    setTimeout(preloadCriticalScripts, 0)
  })
</script>

<script>
  // Astro View„Éà„É©„É≥„Ç∏„Ç∑„Éß„É≥„ÅÆÊúÄÈÅ©Âåñ
  document.addEventListener('astro:before-preparation', () => {
    // „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥Ââç„Å´‰∏çË¶Å„Å™Ë®àÁÆó„Çí„Éê„ÉÉ„ÉÅÂá¶ÁêÜ
    if (typeof requestIdleCallback !== 'undefined') {
      requestIdleCallback(() => {
        // „Ç¢„Ç§„Éâ„É´ÊôÇÈñì‰∏≠„Å´„É¨„Ç§„Ç¢„Ç¶„ÉàË®àÁÆó„Çí‰∫ãÂâçÂÆüË°å
        document.body.offsetHeight // Âº∑Âà∂„É¨„Ç§„Ç¢„Ç¶„ÉàÂÆüË°å
      })
    }
  })

  // View Transitions„ÅÆÂº∑Âà∂„É™„Éï„É≠„ÉºËªΩÊ∏õ„Çπ„ÇØ„É™„Éó„Éà
  document.addEventListener('astro:before-preparation', () => {
    // „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥Ââç„Å´‰∏çË¶Å„Å™Ë®àÁÆó„Çí„Éê„ÉÉ„ÉÅÂá¶ÁêÜ
    if (typeof requestIdleCallback !== 'undefined') {
      requestIdleCallback(() => {
        // „Ç¢„Ç§„Éâ„É´ÊôÇÈñì‰∏≠„Å´„É¨„Ç§„Ç¢„Ç¶„ÉàË®àÁÆó„Çí‰∫ãÂâçÂÆüË°å
        document.body.offsetHeight // Âº∑Âà∂„É¨„Ç§„Ç¢„Ç¶„ÉàÂÆüË°å
      })
    }
  })

  document.addEventListener('astro:after-swap', () => {
    // „Éö„Éº„Ç∏ÈÅ∑ÁßªÂæå„ÅÆ„É¨„Ç§„Ç¢„Ç¶„ÉàÂá¶ÁêÜ„ÇíÊúÄÈÅ©Âåñ
    requestAnimationFrame(() => {
      // ‰∏ÄÂ∫¶„ÅÆ„Éï„É¨„Éº„É†ÂÜÖ„Åß„É¨„Ç§„Ç¢„Ç¶„ÉàÈñ¢ÈÄ£„ÅÆÂá¶ÁêÜ„ÇíÂÆå‰∫Ü
      const persistedElements = document.querySelectorAll('[data-astro-transition-persist]')
      persistedElements.forEach((el) => {
        if (el instanceof HTMLElement && el.style) {
          el.style.transform = el.style.transform // Âº∑Âà∂ÂÜçË®àÁÆó„ÇíÈò≤„Åê
        }
      })
    })
  })
</script>

<!-- SEO -->
<meta name='title' content={siteTitle} />
<meta name='description' content={description} />
<meta name='author' content={siteConfig.author} />
<meta name='robots' content='index, follow' />
<meta name='language' content='ja' />
<meta name='format-detection' content='telephone=no' />

<!-- Open Graph / Facebook -->
<meta property='og:type' content={articleDate ? 'article' : 'website'} />
<meta property='og:url' content={Astro.url} />
<meta property='og:title' content={title} />
<meta property='og:description' content={description} />
<meta property='og:image' content={socialImageURL} />
{
  articleDate && (
    <>
      <meta property='article:author' content={siteConfig.author} />
      <meta property='article:published_time' content={articleDate} />
    </>
  )
}
{
  modifiedDate && (
    <>
      <meta property='article:modified_time' content={modifiedDate} />
    </>
  )
}

<!-- Twitter -->
<meta property='twitter:card' content='summary_large_image' />
<meta property='twitter:url' content={Astro.url} />
<meta property='twitter:title' content={title} />
<meta property='twitter:description' content={description} />
<meta property='twitter:image' content={socialImageURL} />

<!-- RSS auto-discovery -->
<link rel='alternate' type='application/rss+xml' title={siteConfig.title} href='/rss.xml' />
