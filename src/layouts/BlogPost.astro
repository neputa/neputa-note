---
import type { CollectionEntry } from 'astro:content'
import BaseLayout from '@/layouts/BaseLayout'
import Tag from '@/components/ui/Tag'
import type { MarkdownHeading } from 'astro'
import { Image } from 'astro:assets'
import PostInfo from '@/components/widgets/PostInfo'
import MobileFooter from '@/components/widgets/MobileFooter'
import Jsonld from '@/components/Jsonld'

type Props = {
  id: CollectionEntry<'blog'>['id']
  data: CollectionEntry<'blog'>['data']
  headings: MarkdownHeading[]
  readTime: string
}

const { data, readTime, headings, id } = Astro.props
const { title, description, pubDate, modDate, heroImage = null, tags } = data
---

<BaseLayout
  title={title}
  description={description}
  image={heroImage?.src}
  articleDate={pubDate}
  modifiedDate={modDate}
>
  <Jsonld
    title={title}
    description={description}
    pubDate={pubDate}
    modDate={modDate}
    tags={tags}
    slug={id}
    heroImage={heroImage}
  />
  <article class='min-w-full sm:max-w-none md:max-w-none md:py-4'>
    <header class='mb-3 flex flex-col items-center justify-center gap-4'>
      <div class='flex flex-col'>
        <h1 class='text-balancetext-center text-3xl font-semibold'>
          {title}
        </h1>
        {
          pubDate && (
            <PostInfo
              pubDate={pubDate}
              modDate={modDate}
              classNames='items-center justify-center'
              readTime={readTime}
            />
          )
        }
      </div>
      <div class='flex flex-wrap items-center justify-center gap-3'>
        {tags.map((tag: string) => <Tag tag={tag} />)}
      </div>
    </header>
    <div class='my-8 w-full aspect-[5/2] overflow-hidden rounded-md bg-gray-200 dark:bg-gray-800'>
      {
        heroImage ? (
          <Image
            src={heroImage}
            width={1000}
            height={400}
            quality={100}
            widths={[320, 768, 1000]}
            sizes='(max-width:639px) 320px, (max-width: 1023px) 768px, 1000px'
            format='webp'
            loading='eager'
            class='w-full h-full object-cover'
            alt={`img of ${title}`}
            fetchpriority='high'
          />
        ) : (
          <div class='w-full h-full flex items-center justify-center text-gray-500 dark:text-gray-400'>
            <span class='text-lg'>No Image</span>
          </div>
        )
      }
    </div>

    <div>
      <slot />
    </div>
  </article>

  <MobileFooter slot='mobileFooter' headings={headings} />
</BaseLayout>

<script>
  const fnObserver = () => {
    function handleIntersection(
      entries: IntersectionObserverEntry[],
      observer: IntersectionObserver
    ) {
      entries.forEach((entry) => {
        const index = document.querySelector(`aside a[href="#${entry.target.id}"]`)

        if (entry.isIntersecting) {
          index?.classList.remove('bg-slate-200', 'dark:bg-slate-800') // remove bg
          index?.classList.add(
            'bg-primary-600',
            'dark:bg-primary-700',
            'text-white',
            'font-bold',
            'transition-colors',
            'duration-200'
          )
        } else {
          index?.classList.add('bg-slate-200', 'dark:bg-slate-800') // add bg
          index?.classList.remove(
            'bg-primary-600',
            'dark:bg-primary-700',
            'text-white',
            'font-bold',
            'transition-colors',
            'duration-200'
          )
        }
      })
    }

    const headings = document.querySelectorAll(
      'div.prose h1, div.prose h2, div.prose h3, div.prose h4, div.prose h5, div.prose h6'
    )

    const options = {
      root: null,
      rootMargin: ' 15% 0px 0% 0px ',
      threshold: 1
    }

    const observer = new IntersectionObserver(handleIntersection, options)

    headings.forEach((heading) => {
      observer.observe(heading)
    })
  }
  fnObserver()
  document.addEventListener('astro:after-swap', fnObserver)
</script>
